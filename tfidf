import nltk
import math
import string
import jieba
from nltk.corpus import stopwords
from collections import Counter
from nltk.stem.porter import *


def str_replace(str_source,char,*words):     
    str_temp = str_source
    for word in words:
        str_temp = str_temp.replace(word,char)
    return str_temp

#未完成，还需要stopwords.txt
# def str_stopword(str_source):
#     stopwords=[]
#     for word in open('stopwords.txt','r'):
#         stopwords.append(word.strip())
#     filtered = [word for word in str_source if not word.encode("utf-8") in stopwords]
#     return filtered

def tf(word,unfiltered):
    return unfiltered[word]/sum(unfiltered.values())

def n_containing(word,count_list):
    return sum(1 for unfiltered in count_list if word in unfiltered)

def idf(word,count_list):
    return math.log(len(count_list)/(1+n_containing(word,countlist)))

def tfidf(word,unfiltered,count_list):
    return tf(word,unfiltered)*idf(word,count_list)

test1="最早发现的基本粒子。带负电，电量为1.602189×10-19库仑，是电量的最小单元。质量为9.10953×10-28克。 常用符号e表示。1897年由英国物理学家约瑟夫·约翰·汤姆生在研究阴极射线时发现。一切原子都由一个带正电的原子核和围绕它运动的若干电子组成。电子的定向运动形成电流，如金属导线中的电流。利用电场和磁场，能按照需要控制电子的运动(在固体、真空中)，从而制造出各种电子仪器和元件，如各种电子管、电子显微镜等。电子的波动性于1927年由晶体衍射实验得到证实。"
test2="电子并非基本粒子，100多年前，当美国物理学家Robert Millikan首次通过实验测出电子所带的电荷为1.602×10-19C后，这一电荷值便被广泛看作为电荷基本单元。然而如果按照经典理论，将电子看作“整体”或者“基本”粒子，将使我们对电子在某些物理情境下的行为感到极端困惑，比如当电子被置入强磁场后出现的非整量子霍尔效应。"
test3="电子与质子之间的吸引性库仑力，使得电子被束缚于原子，称此电子为束缚电子。两个以上的原子，会交换或分享它们的束缚电子，这是化学键的主要成因。当电子脱离原子核的束缚，能够自由移动时，改称此电子为自由电子。许多自由电子一起移动所产生的净流动现象称为电流。在许多物理现象里，像电传导、磁性或热传导，电子都扮演了要重要的角色。移动的电子会产生磁场，也会被外磁场偏转。呈加速度运动的电子会发射电磁辐射。"

countlist=[test1,test2,test3]
for i, str_source in enumerate(countlist,1):
    print ("top 5 words in test %s"%i) 
    str_temp = str_replace(str_source,"","，","。","(",")","“","”")
    cut = jieba.cut(str_temp)
    unfiltered = Counter(list(cut))
    scores = {word: tfidf(word,unfiltered,countlist) for word in unfiltered}
    sorted_words = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    for word, score in sorted_words[:5]:
        print("\tWord: {}, TF-IDF: {}".format(word, round(score, 5)))

            
    
    
